package main

import (
	"context"
	"fmt"
	"net/http"
	"os"

	"github.com/gameplan-backend/api"
	"github.com/gameplan-backend/api_server"
	"github.com/gameplan-backend/db"
	"github.com/jackc/pgx/v5/pgxpool"
	"github.com/mailgun/mailgun-go/v4"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	echomiddleware "github.com/oapi-codegen/echo-middleware"
	"github.com/stripe/stripe-go/v78/client"
	"github.com/stytchauth/stytch-go/v16/stytch/consumer/stytchapi"
)

func main() {
	e := echo.New()

	// Middleware
	e.Use(middleware.Logger())
	e.Use(middleware.Recover())

	// Load and validate OpenAPI spec
	swagger, err := openapi3.NewLoader().LoadFromFile("openapi.yml")
	if err != nil {
		e.Logger.Fatal("Failed to load OpenAPI spec:", err)
	}
	if err := swagger.Validate(context.Background()); err != nil {
		e.Logger.Fatal("OpenAPI spec validation failed:", err)
	}

	// Add OpenAPI validator middleware
	e.Use(echomiddleware.OapiRequestValidator(swagger))

	// Initialize Stytch client
	stytchProjectID := os.Getenv("STYTCH_PROJECT_ID")
	stytchSecret := os.Getenv("STYTCH_SECRET")
	if stytchProjectID == "" || stytchSecret == "" {
		panic("STYTCH_PROJECT_ID and STYTCH_SECRET environment variables must be set")
	}

	stytchClient, err := stytchapi.NewClient(
		stytchProjectID,
		stytchSecret,
	)
	if err != nil {
		panic(err)
	}

	// Create the API implementation
	// Initialize Mailgun client
	mailgunDomain := os.Getenv("MAILGUN_DOMAIN")
	mailgunAPIKey := os.Getenv("MAILGUN_API_KEY")
	if mailgunDomain == "" || mailgunAPIKey == "" {
		panic("MAILGUN_DOMAIN and MAILGUN_API_KEY environment variables must be set")
	}
	mg := mailgun.NewMailgun(mailgunDomain, mailgunAPIKey)

	// Initialize Database with connection pooling
	dbURL := os.Getenv("DATABASE_URL")
	if dbURL == "" {
		panic("DATABASE_URL environment variable must be set")
	}
	dbPool, err := pgxpool.New(context.Background(), dbURL)
	if err != nil {
		panic(fmt.Sprintf("Unable to connect to database: %v", err))
	}
	dbQueries := db.New(dbPool)

	// Initialize Stripe client
	stripeKey := os.Getenv("STRIPE_SECRET_KEY")
	if stripeKey == "" {
		panic("STRIPE_SECRET_KEY environment variable must be set")
	}
	stripeClient := client.New(stripeKey, nil)

	myApi := &api_server.MyApiServer{
		StytchClient: stytchClient,
		StripeClient: stripeClient,
		DB:           dbQueries,
		Emailer:      mg,
	}

	// Authentication middleware
	e.Use(api.AuthMiddleware(stytchClient))

	// Register the strict handlers generated by oapi-codegen
	strictHandler := api.NewStrictHandler(myApi, nil)
	api.RegisterHandlers(e, strictHandler)

	// Start server
	port := "8080"
	fmt.Printf("Starting server on port %s...\n", port)
	if err := e.Start(":" + port); err != nil && err != http.ErrServerClosed {
		e.Logger.Fatal(err)
	}
}
