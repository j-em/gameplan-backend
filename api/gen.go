// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for CreatePlayerCustomColumnParamsFieldType.
const (
	Boolean CreatePlayerCustomColumnParamsFieldType = "boolean"
	Date    CreatePlayerCustomColumnParamsFieldType = "date"
	Number  CreatePlayerCustomColumnParamsFieldType = "number"
	Select  CreatePlayerCustomColumnParamsFieldType = "select"
	Text    CreatePlayerCustomColumnParamsFieldType = "text"
)

// Defines values for SignUpUserParamsLang.
const (
	En SignUpUserParamsLang = "en"
	Fr SignUpUserParamsLang = "fr"
)

// AddMatchParams defines model for AddMatchParams.
type AddMatchParams struct {
	Group     int                `json:"group"`
	MatchDate openapi_types.Date `json:"matchDate"`
	PlayerId1 int                `json:"playerId1"`
	PlayerId2 int                `json:"playerId2"`
	SeasonId  int                `json:"seasonId"`
}

// ApiResult defines model for ApiResult.
type ApiResult struct {
	Data  *map[string]interface{} `json:"data"`
	Error *struct {
		Code    *string `json:"code,omitempty"`
		Message *string `json:"message,omitempty"`
	} `json:"error"`
	IsSuccess *bool `json:"isSuccess,omitempty"`
}

// CreatePlayerCustomColumnParams defines model for CreatePlayerCustomColumnParams.
type CreatePlayerCustomColumnParams struct {
	Description  *string                                 `json:"description"`
	DisplayOrder *int                                    `json:"displayOrder"`
	FieldType    CreatePlayerCustomColumnParamsFieldType `json:"fieldType"`
	IsRequired   *bool                                   `json:"isRequired"`
	Name         string                                  `json:"name"`
}

// CreatePlayerCustomColumnParamsFieldType defines model for CreatePlayerCustomColumnParams.FieldType.
type CreatePlayerCustomColumnParamsFieldType string

// CreatePoolPlayerParams defines model for CreatePoolPlayerParams.
type CreatePoolPlayerParams struct {
	Email                     *string `json:"email"`
	EmailNotificationsEnabled bool    `json:"emailNotificationsEnabled"`
	Name                      string  `json:"name"`
}

// CreateSeasonParams defines model for CreateSeasonParams.
type CreateSeasonParams struct {
	AmountOfTables int                `json:"amountOfTables"`
	Name           string             `json:"name"`
	Players        []int              `json:"players"`
	SeasonType     string             `json:"seasonType"`
	StartDate      openapi_types.Date `json:"startDate"`
}

// DbMatch defines model for DbMatch.
type DbMatch struct {
	Group           *int                `json:"group,omitempty"`
	Id              *int                `json:"id,omitempty"`
	MatchDate       *openapi_types.Date `json:"matchDate,omitempty"`
	PlayerId1       *int                `json:"playerId1,omitempty"`
	PlayerId1Points *int                `json:"playerId1Points,omitempty"`
	PlayerId2       *int                `json:"playerId2,omitempty"`
	PlayerId2Points *int                `json:"playerId2Points,omitempty"`
	SeasonId        *int                `json:"seasonId,omitempty"`
}

// GetSeasonDetailsParams defines model for GetSeasonDetailsParams.
type GetSeasonDetailsParams struct {
	SeasonId int `json:"seasonId"`
}

// LoginUserParams defines model for LoginUserParams.
type LoginUserParams struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// ResetCurrentUserPasswordParams defines model for ResetCurrentUserPasswordParams.
type ResetCurrentUserPasswordParams struct {
	NewPassword        string `json:"newPassword"`
	NewPasswordConfirm string `json:"newPasswordConfirm"`
	Token              string `json:"token"`
}

// SaveAppSettingsParams defines model for SaveAppSettingsParams.
type SaveAppSettingsParams struct {
	Settings map[string]interface{} `json:"settings"`
}

// SaveMatchDataParams defines model for SaveMatchDataParams.
type SaveMatchDataParams struct {
	Key   string                 `json:"key"`
	Value map[string]interface{} `json:"value"`
}

// SavePlayerCustomValueParams defines model for SavePlayerCustomValueParams.
type SavePlayerCustomValueParams struct {
	ColumnId int    `json:"columnId"`
	PlayerId int    `json:"playerId"`
	Value    string `json:"value"`
}

// SavePlayerDataParams defines model for SavePlayerDataParams.
type SavePlayerDataParams struct {
	Key      string                 `json:"key"`
	PlayerId int                    `json:"playerId"`
	Value    map[string]interface{} `json:"value"`
}

// SaveUserSettingsParams defines model for SaveUserSettingsParams.
type SaveUserSettingsParams struct {
	Birthday *openapi_types.Date `json:"birthday"`
	Email    *string             `json:"email"`
	Lang     *string             `json:"lang"`
	Name     *string             `json:"name"`
	Phone    *string             `json:"phone"`
}

// SendResetPasswordLinkParams defines model for SendResetPasswordLinkParams.
type SendResetPasswordLinkParams struct {
	Email string `json:"email"`
}

// SendSupportMessageParams defines model for SendSupportMessageParams.
type SendSupportMessageParams struct {
	Content     string `json:"content"`
	From        string `json:"from"`
	MessageType string `json:"messageType"`
}

// SignUpUserParams defines model for SignUpUserParams.
type SignUpUserParams struct {
	AcceptTerms     bool                 `json:"acceptTerms"`
	Birthday        *openapi_types.Date  `json:"birthday"`
	ConfirmPassword string               `json:"confirmPassword"`
	Country         string               `json:"country"`
	Email           string               `json:"email"`
	Lang            SignUpUserParamsLang `json:"lang"`
	Name            string               `json:"name"`
	Password        string               `json:"password"`
	Phone           *string              `json:"phone"`
}

// SignUpUserParamsLang defines model for SignUpUserParams.Lang.
type SignUpUserParamsLang string

// UnassignPlayerFromMatchParams defines model for UnassignPlayerFromMatchParams.
type UnassignPlayerFromMatchParams struct {
	MatchId  int `json:"matchId"`
	PlayerId int `json:"playerId"`
}

// UpdateSeasonParams defines model for UpdateSeasonParams.
type UpdateSeasonParams struct {
	Name string `json:"name"`
}

// UpdateUserPasswordParams defines model for UpdateUserPasswordParams.
type UpdateUserPasswordParams struct {
	Password             string `json:"password"`
	PasswordConfirmation string `json:"passwordConfirmation"`
	Token                string `json:"token"`
}

// PutMatchesBatchesJSONBody defines parameters for PutMatchesBatches.
type PutMatchesBatchesJSONBody = []DbMatch

// GetPlayersParams defines parameters for GetPlayers.
type GetPlayersParams struct {
	// Limit The maximum number of players to return
	Limit int `form:"limit" json:"limit"`

	// Offset The offset to start from
	Offset int `form:"offset" json:"offset"`
}

// PostUsersVerifyMagicLinkTokenJSONBody defines parameters for PostUsersVerifyMagicLinkToken.
type PostUsersVerifyMagicLinkTokenJSONBody struct {
	Token string `json:"token"`
}

// PostMatchesJSONRequestBody defines body for PostMatches for application/json ContentType.
type PostMatchesJSONRequestBody = AddMatchParams

// PutMatchesBatchesJSONRequestBody defines body for PutMatchesBatches for application/json ContentType.
type PutMatchesBatchesJSONRequestBody = PutMatchesBatchesJSONBody

// PostMatchesUnassignPlayerFromMatchJSONRequestBody defines body for PostMatchesUnassignPlayerFromMatch for application/json ContentType.
type PostMatchesUnassignPlayerFromMatchJSONRequestBody = UnassignPlayerFromMatchParams

// PutMatchesMatchIdJSONRequestBody defines body for PutMatchesMatchId for application/json ContentType.
type PutMatchesMatchIdJSONRequestBody = SaveMatchDataParams

// PostPlayersJSONRequestBody defines body for PostPlayers for application/json ContentType.
type PostPlayersJSONRequestBody = CreatePoolPlayerParams

// PutPlayersPlayerIdJSONRequestBody defines body for PutPlayersPlayerId for application/json ContentType.
type PutPlayersPlayerIdJSONRequestBody = SavePlayerDataParams

// PutPlayersPlayerIdCustomColumnsJSONRequestBody defines body for PutPlayersPlayerIdCustomColumns for application/json ContentType.
type PutPlayersPlayerIdCustomColumnsJSONRequestBody = SavePlayerCustomValueParams

// PostSeasonsJSONRequestBody defines body for PostSeasons for application/json ContentType.
type PostSeasonsJSONRequestBody = CreateSeasonParams

// GetSeasonsSeasonIdJSONRequestBody defines body for GetSeasonsSeasonId for application/json ContentType.
type GetSeasonsSeasonIdJSONRequestBody = GetSeasonDetailsParams

// PutSeasonsSeasonIdJSONRequestBody defines body for PutSeasonsSeasonId for application/json ContentType.
type PutSeasonsSeasonIdJSONRequestBody = UpdateSeasonParams

// PostSessionsJSONRequestBody defines body for PostSessions for application/json ContentType.
type PostSessionsJSONRequestBody = LoginUserParams

// PostSupportMessagesJSONRequestBody defines body for PostSupportMessages for application/json ContentType.
type PostSupportMessagesJSONRequestBody = SendSupportMessageParams

// PostUsersSendResetPasswordLinkJSONRequestBody defines body for PostUsersSendResetPasswordLink for application/json ContentType.
type PostUsersSendResetPasswordLinkJSONRequestBody = SendResetPasswordLinkParams

// PostUsersSignUpUserJSONRequestBody defines body for PostUsersSignUpUser for application/json ContentType.
type PostUsersSignUpUserJSONRequestBody = SignUpUserParams

// PostUsersUpdateUserPasswordJSONRequestBody defines body for PostUsersUpdateUserPassword for application/json ContentType.
type PostUsersUpdateUserPasswordJSONRequestBody = UpdateUserPasswordParams

// PostUsersVerifyMagicLinkTokenJSONRequestBody defines body for PostUsersVerifyMagicLinkToken for application/json ContentType.
type PostUsersVerifyMagicLinkTokenJSONRequestBody PostUsersVerifyMagicLinkTokenJSONBody

// PostUsersUserIdAppsettingsJSONRequestBody defines body for PostUsersUserIdAppsettings for application/json ContentType.
type PostUsersUserIdAppsettingsJSONRequestBody = SaveAppSettingsParams

// PostUsersUserIdCustomPlayerColumnsJSONRequestBody defines body for PostUsersUserIdCustomPlayerColumns for application/json ContentType.
type PostUsersUserIdCustomPlayerColumnsJSONRequestBody = CreatePlayerCustomColumnParams

// PostUsersUserIdResetCurrentUserPasswordJSONRequestBody defines body for PostUsersUserIdResetCurrentUserPassword for application/json ContentType.
type PostUsersUserIdResetCurrentUserPasswordJSONRequestBody = ResetCurrentUserPasswordParams

// PostUsersUserIdUsersettingsJSONRequestBody defines body for PostUsersUserIdUsersettings for application/json ContentType.
type PostUsersUserIdUsersettingsJSONRequestBody = SaveUserSettingsParams

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Add a new match
	// (POST /matches)
	PostMatches(ctx echo.Context) error
	// Update multiple matches at the same time
	// (PUT /matches/batches)
	PutMatchesBatches(ctx echo.Context) error
	// Unassign a player from a match
	// (POST /matches/unassignPlayerFromMatch)
	PostMatchesUnassignPlayerFromMatch(ctx echo.Context) error
	// Delete a match
	// (DELETE /matches/{matchId})
	DeleteMatchesMatchId(ctx echo.Context, matchId int) error
	// Save match data
	// (PUT /matches/{matchId})
	PutMatchesMatchId(ctx echo.Context, matchId int) error
	// Get a list of players
	// (GET /players)
	GetPlayers(ctx echo.Context, params GetPlayersParams) error
	// Create a pool player
	// (POST /players)
	PostPlayers(ctx echo.Context) error
	// Delete a player
	// (DELETE /players/{playerId})
	DeletePlayersPlayerId(ctx echo.Context, playerId int) error
	// Get a player by ID
	// (GET /players/{playerId})
	GetPlayersPlayerId(ctx echo.Context, playerId int) error
	// Save player data
	// (PUT /players/{playerId})
	PutPlayersPlayerId(ctx echo.Context, playerId int) error
	// Get player custom columns values for a player
	// (GET /players/{playerId}/customColumns)
	GetPlayersPlayerIdCustomColumns(ctx echo.Context, playerId int) error
	// Save a player custom value
	// (PUT /players/{playerId}/customColumns)
	PutPlayersPlayerIdCustomColumns(ctx echo.Context, playerId int) error
	// Get the schedule for a player
	// (GET /players/{playerId}/schedule)
	GetPlayersPlayerIdSchedule(ctx echo.Context, playerId int) error
	// Get all seasons (light version)
	// (GET /seasons)
	GetSeasons(ctx echo.Context) error
	// Create a season with matches
	// (POST /seasons)
	PostSeasons(ctx echo.Context) error
	// Get the total number of seasons
	// (GET /seasons/totalAmount)
	GetSeasonsTotalAmount(ctx echo.Context) error
	// Delete a season
	// (DELETE /seasons/{seasonId})
	DeleteSeasonsSeasonId(ctx echo.Context, seasonId int) error
	// Get season details
	// (GET /seasons/{seasonId})
	GetSeasonsSeasonId(ctx echo.Context, seasonId int) error
	// Update a season metadata
	// (PUT /seasons/{seasonId})
	PutSeasonsSeasonId(ctx echo.Context, seasonId int) error
	// Get the public schedule link for a season
	// (GET /seasons/{seasonId}/publicScheduleLink)
	GetSeasonsSeasonIdPublicScheduleLink(ctx echo.Context, seasonId int) error
	// Get the scoreboard for a season
	// (GET /seasons/{seasonId}/scoreboard)
	GetSeasonsSeasonIdScoreboard(ctx echo.Context, seasonId int) error
	// Get upcoming seasons for the user
	// (GET /seasons/{seasonId}/upcoming)
	GetSeasonsSeasonIdUpcoming(ctx echo.Context, seasonId int) error
	// Create a new session / log in an existing user
	// (POST /sessions)
	PostSessions(ctx echo.Context) error
	// Handle successful upgrade
	// (POST /subscriptions/handleSuccessUpgrade)
	PostSubscriptionsHandleSuccessUpgrade(ctx echo.Context) error
	// Initialize update payment method
	// (POST /subscriptions/initUpdatePaymentMethod)
	PostSubscriptionsInitUpdatePaymentMethod(ctx echo.Context) error
	// Upgrade user subscription
	// (POST /subscriptions/upgradeUserSubscription)
	PostSubscriptionsUpgradeUserSubscription(ctx echo.Context) error
	// Send a support message
	// (POST /support/messages)
	PostSupportMessages(ctx echo.Context) error
	// Send a reset password link
	// (POST /users/sendResetPasswordLink)
	PostUsersSendResetPasswordLink(ctx echo.Context) error
	// Send a verification email
	// (POST /users/sendVerificationEmail)
	PostUsersSendVerificationEmail(ctx echo.Context) error
	// Sign up a new user
	// (POST /users/signUpUser)
	PostUsersSignUpUser(ctx echo.Context) error
	// Update user password
	// (POST /users/updateUserPassword)
	PostUsersUpdateUserPassword(ctx echo.Context) error
	// Verify a magic link token
	// (POST /users/verifyMagicLinkToken)
	PostUsersVerifyMagicLinkToken(ctx echo.Context) error
	// Delete the current user
	// (DELETE /users/{userId})
	DeleteUsersUserId(ctx echo.Context, userId int) error
	// Get app settings
	// (GET /users/{userId}/appsettings)
	GetUsersUserIdAppsettings(ctx echo.Context, userId int) error
	// Save app settings
	// (POST /users/{userId}/appsettings)
	PostUsersUserIdAppsettings(ctx echo.Context, userId int) error
	// Get all player custom columns
	// (GET /users/{userId}/customPlayerColumns)
	GetUsersUserIdCustomPlayerColumns(ctx echo.Context, userId int) error
	// Create a player custom column for the user
	// (POST /users/{userId}/customPlayerColumns)
	PostUsersUserIdCustomPlayerColumns(ctx echo.Context, userId int) error
	// Delete a player custom column
	// (DELETE /users/{userId}/customPlayerColumns/{columnId})
	DeleteUsersUserIdCustomPlayerColumnsColumnId(ctx echo.Context, userId int, columnId int) error
	// Reset the current user's password
	// (POST /users/{userId}/resetCurrentUserPassword)
	PostUsersUserIdResetCurrentUserPassword(ctx echo.Context, userId int) error
	// Cancel user subscription
	// (DELETE /users/{userId}/subscription)
	DeleteUsersUserIdSubscription(ctx echo.Context, userId int) error
	// Get user subscription details
	// (GET /users/{userId}/subscription)
	GetUsersUserIdSubscription(ctx echo.Context, userId int) error
	// Get user settings
	// (GET /users/{userId}/usersettings)
	GetUsersUserIdUsersettings(ctx echo.Context, userId int) error
	// Save user settings
	// (POST /users/{userId}/usersettings)
	PostUsersUserIdUsersettings(ctx echo.Context, userId int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostMatches converts echo context to params.
func (w *ServerInterfaceWrapper) PostMatches(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostMatches(ctx)
	return err
}

// PutMatchesBatches converts echo context to params.
func (w *ServerInterfaceWrapper) PutMatchesBatches(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutMatchesBatches(ctx)
	return err
}

// PostMatchesUnassignPlayerFromMatch converts echo context to params.
func (w *ServerInterfaceWrapper) PostMatchesUnassignPlayerFromMatch(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostMatchesUnassignPlayerFromMatch(ctx)
	return err
}

// DeleteMatchesMatchId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteMatchesMatchId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "matchId" -------------
	var matchId int

	err = runtime.BindStyledParameterWithOptions("simple", "matchId", ctx.Param("matchId"), &matchId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter matchId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteMatchesMatchId(ctx, matchId)
	return err
}

// PutMatchesMatchId converts echo context to params.
func (w *ServerInterfaceWrapper) PutMatchesMatchId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "matchId" -------------
	var matchId int

	err = runtime.BindStyledParameterWithOptions("simple", "matchId", ctx.Param("matchId"), &matchId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter matchId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutMatchesMatchId(ctx, matchId)
	return err
}

// GetPlayers converts echo context to params.
func (w *ServerInterfaceWrapper) GetPlayers(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPlayersParams
	// ------------- Required query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, true, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, true, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPlayers(ctx, params)
	return err
}

// PostPlayers converts echo context to params.
func (w *ServerInterfaceWrapper) PostPlayers(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostPlayers(ctx)
	return err
}

// DeletePlayersPlayerId converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePlayersPlayerId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "playerId" -------------
	var playerId int

	err = runtime.BindStyledParameterWithOptions("simple", "playerId", ctx.Param("playerId"), &playerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter playerId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeletePlayersPlayerId(ctx, playerId)
	return err
}

// GetPlayersPlayerId converts echo context to params.
func (w *ServerInterfaceWrapper) GetPlayersPlayerId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "playerId" -------------
	var playerId int

	err = runtime.BindStyledParameterWithOptions("simple", "playerId", ctx.Param("playerId"), &playerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter playerId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPlayersPlayerId(ctx, playerId)
	return err
}

// PutPlayersPlayerId converts echo context to params.
func (w *ServerInterfaceWrapper) PutPlayersPlayerId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "playerId" -------------
	var playerId int

	err = runtime.BindStyledParameterWithOptions("simple", "playerId", ctx.Param("playerId"), &playerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter playerId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutPlayersPlayerId(ctx, playerId)
	return err
}

// GetPlayersPlayerIdCustomColumns converts echo context to params.
func (w *ServerInterfaceWrapper) GetPlayersPlayerIdCustomColumns(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "playerId" -------------
	var playerId int

	err = runtime.BindStyledParameterWithOptions("simple", "playerId", ctx.Param("playerId"), &playerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter playerId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPlayersPlayerIdCustomColumns(ctx, playerId)
	return err
}

// PutPlayersPlayerIdCustomColumns converts echo context to params.
func (w *ServerInterfaceWrapper) PutPlayersPlayerIdCustomColumns(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "playerId" -------------
	var playerId int

	err = runtime.BindStyledParameterWithOptions("simple", "playerId", ctx.Param("playerId"), &playerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter playerId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutPlayersPlayerIdCustomColumns(ctx, playerId)
	return err
}

// GetPlayersPlayerIdSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) GetPlayersPlayerIdSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "playerId" -------------
	var playerId int

	err = runtime.BindStyledParameterWithOptions("simple", "playerId", ctx.Param("playerId"), &playerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter playerId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPlayersPlayerIdSchedule(ctx, playerId)
	return err
}

// GetSeasons converts echo context to params.
func (w *ServerInterfaceWrapper) GetSeasons(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSeasons(ctx)
	return err
}

// PostSeasons converts echo context to params.
func (w *ServerInterfaceWrapper) PostSeasons(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSeasons(ctx)
	return err
}

// GetSeasonsTotalAmount converts echo context to params.
func (w *ServerInterfaceWrapper) GetSeasonsTotalAmount(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSeasonsTotalAmount(ctx)
	return err
}

// DeleteSeasonsSeasonId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSeasonsSeasonId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "seasonId" -------------
	var seasonId int

	err = runtime.BindStyledParameterWithOptions("simple", "seasonId", ctx.Param("seasonId"), &seasonId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter seasonId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteSeasonsSeasonId(ctx, seasonId)
	return err
}

// GetSeasonsSeasonId converts echo context to params.
func (w *ServerInterfaceWrapper) GetSeasonsSeasonId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "seasonId" -------------
	var seasonId int

	err = runtime.BindStyledParameterWithOptions("simple", "seasonId", ctx.Param("seasonId"), &seasonId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter seasonId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSeasonsSeasonId(ctx, seasonId)
	return err
}

// PutSeasonsSeasonId converts echo context to params.
func (w *ServerInterfaceWrapper) PutSeasonsSeasonId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "seasonId" -------------
	var seasonId int

	err = runtime.BindStyledParameterWithOptions("simple", "seasonId", ctx.Param("seasonId"), &seasonId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter seasonId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutSeasonsSeasonId(ctx, seasonId)
	return err
}

// GetSeasonsSeasonIdPublicScheduleLink converts echo context to params.
func (w *ServerInterfaceWrapper) GetSeasonsSeasonIdPublicScheduleLink(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "seasonId" -------------
	var seasonId int

	err = runtime.BindStyledParameterWithOptions("simple", "seasonId", ctx.Param("seasonId"), &seasonId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter seasonId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSeasonsSeasonIdPublicScheduleLink(ctx, seasonId)
	return err
}

// GetSeasonsSeasonIdScoreboard converts echo context to params.
func (w *ServerInterfaceWrapper) GetSeasonsSeasonIdScoreboard(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "seasonId" -------------
	var seasonId int

	err = runtime.BindStyledParameterWithOptions("simple", "seasonId", ctx.Param("seasonId"), &seasonId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter seasonId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSeasonsSeasonIdScoreboard(ctx, seasonId)
	return err
}

// GetSeasonsSeasonIdUpcoming converts echo context to params.
func (w *ServerInterfaceWrapper) GetSeasonsSeasonIdUpcoming(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "seasonId" -------------
	var seasonId int

	err = runtime.BindStyledParameterWithOptions("simple", "seasonId", ctx.Param("seasonId"), &seasonId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter seasonId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSeasonsSeasonIdUpcoming(ctx, seasonId)
	return err
}

// PostSessions converts echo context to params.
func (w *ServerInterfaceWrapper) PostSessions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSessions(ctx)
	return err
}

// PostSubscriptionsHandleSuccessUpgrade converts echo context to params.
func (w *ServerInterfaceWrapper) PostSubscriptionsHandleSuccessUpgrade(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSubscriptionsHandleSuccessUpgrade(ctx)
	return err
}

// PostSubscriptionsInitUpdatePaymentMethod converts echo context to params.
func (w *ServerInterfaceWrapper) PostSubscriptionsInitUpdatePaymentMethod(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSubscriptionsInitUpdatePaymentMethod(ctx)
	return err
}

// PostSubscriptionsUpgradeUserSubscription converts echo context to params.
func (w *ServerInterfaceWrapper) PostSubscriptionsUpgradeUserSubscription(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSubscriptionsUpgradeUserSubscription(ctx)
	return err
}

// PostSupportMessages converts echo context to params.
func (w *ServerInterfaceWrapper) PostSupportMessages(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSupportMessages(ctx)
	return err
}

// PostUsersSendResetPasswordLink converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersSendResetPasswordLink(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsersSendResetPasswordLink(ctx)
	return err
}

// PostUsersSendVerificationEmail converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersSendVerificationEmail(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsersSendVerificationEmail(ctx)
	return err
}

// PostUsersSignUpUser converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersSignUpUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsersSignUpUser(ctx)
	return err
}

// PostUsersUpdateUserPassword converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersUpdateUserPassword(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsersUpdateUserPassword(ctx)
	return err
}

// PostUsersVerifyMagicLinkToken converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersVerifyMagicLinkToken(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsersVerifyMagicLinkToken(ctx)
	return err
}

// DeleteUsersUserId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId int

	err = runtime.BindStyledParameterWithOptions("simple", "userId", ctx.Param("userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteUsersUserId(ctx, userId)
	return err
}

// GetUsersUserIdAppsettings converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersUserIdAppsettings(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId int

	err = runtime.BindStyledParameterWithOptions("simple", "userId", ctx.Param("userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersUserIdAppsettings(ctx, userId)
	return err
}

// PostUsersUserIdAppsettings converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersUserIdAppsettings(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId int

	err = runtime.BindStyledParameterWithOptions("simple", "userId", ctx.Param("userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsersUserIdAppsettings(ctx, userId)
	return err
}

// GetUsersUserIdCustomPlayerColumns converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersUserIdCustomPlayerColumns(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId int

	err = runtime.BindStyledParameterWithOptions("simple", "userId", ctx.Param("userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersUserIdCustomPlayerColumns(ctx, userId)
	return err
}

// PostUsersUserIdCustomPlayerColumns converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersUserIdCustomPlayerColumns(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId int

	err = runtime.BindStyledParameterWithOptions("simple", "userId", ctx.Param("userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsersUserIdCustomPlayerColumns(ctx, userId)
	return err
}

// DeleteUsersUserIdCustomPlayerColumnsColumnId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersUserIdCustomPlayerColumnsColumnId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId int

	err = runtime.BindStyledParameterWithOptions("simple", "userId", ctx.Param("userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// ------------- Path parameter "columnId" -------------
	var columnId int

	err = runtime.BindStyledParameterWithOptions("simple", "columnId", ctx.Param("columnId"), &columnId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter columnId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteUsersUserIdCustomPlayerColumnsColumnId(ctx, userId, columnId)
	return err
}

// PostUsersUserIdResetCurrentUserPassword converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersUserIdResetCurrentUserPassword(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId int

	err = runtime.BindStyledParameterWithOptions("simple", "userId", ctx.Param("userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsersUserIdResetCurrentUserPassword(ctx, userId)
	return err
}

// DeleteUsersUserIdSubscription converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersUserIdSubscription(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId int

	err = runtime.BindStyledParameterWithOptions("simple", "userId", ctx.Param("userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteUsersUserIdSubscription(ctx, userId)
	return err
}

// GetUsersUserIdSubscription converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersUserIdSubscription(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId int

	err = runtime.BindStyledParameterWithOptions("simple", "userId", ctx.Param("userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersUserIdSubscription(ctx, userId)
	return err
}

// GetUsersUserIdUsersettings converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersUserIdUsersettings(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId int

	err = runtime.BindStyledParameterWithOptions("simple", "userId", ctx.Param("userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersUserIdUsersettings(ctx, userId)
	return err
}

// PostUsersUserIdUsersettings converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersUserIdUsersettings(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId int

	err = runtime.BindStyledParameterWithOptions("simple", "userId", ctx.Param("userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsersUserIdUsersettings(ctx, userId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/matches", wrapper.PostMatches)
	router.PUT(baseURL+"/matches/batches", wrapper.PutMatchesBatches)
	router.POST(baseURL+"/matches/unassignPlayerFromMatch", wrapper.PostMatchesUnassignPlayerFromMatch)
	router.DELETE(baseURL+"/matches/:matchId", wrapper.DeleteMatchesMatchId)
	router.PUT(baseURL+"/matches/:matchId", wrapper.PutMatchesMatchId)
	router.GET(baseURL+"/players", wrapper.GetPlayers)
	router.POST(baseURL+"/players", wrapper.PostPlayers)
	router.DELETE(baseURL+"/players/:playerId", wrapper.DeletePlayersPlayerId)
	router.GET(baseURL+"/players/:playerId", wrapper.GetPlayersPlayerId)
	router.PUT(baseURL+"/players/:playerId", wrapper.PutPlayersPlayerId)
	router.GET(baseURL+"/players/:playerId/customColumns", wrapper.GetPlayersPlayerIdCustomColumns)
	router.PUT(baseURL+"/players/:playerId/customColumns", wrapper.PutPlayersPlayerIdCustomColumns)
	router.GET(baseURL+"/players/:playerId/schedule", wrapper.GetPlayersPlayerIdSchedule)
	router.GET(baseURL+"/seasons", wrapper.GetSeasons)
	router.POST(baseURL+"/seasons", wrapper.PostSeasons)
	router.GET(baseURL+"/seasons/totalAmount", wrapper.GetSeasonsTotalAmount)
	router.DELETE(baseURL+"/seasons/:seasonId", wrapper.DeleteSeasonsSeasonId)
	router.GET(baseURL+"/seasons/:seasonId", wrapper.GetSeasonsSeasonId)
	router.PUT(baseURL+"/seasons/:seasonId", wrapper.PutSeasonsSeasonId)
	router.GET(baseURL+"/seasons/:seasonId/publicScheduleLink", wrapper.GetSeasonsSeasonIdPublicScheduleLink)
	router.GET(baseURL+"/seasons/:seasonId/scoreboard", wrapper.GetSeasonsSeasonIdScoreboard)
	router.GET(baseURL+"/seasons/:seasonId/upcoming", wrapper.GetSeasonsSeasonIdUpcoming)
	router.POST(baseURL+"/sessions", wrapper.PostSessions)
	router.POST(baseURL+"/subscriptions/handleSuccessUpgrade", wrapper.PostSubscriptionsHandleSuccessUpgrade)
	router.POST(baseURL+"/subscriptions/initUpdatePaymentMethod", wrapper.PostSubscriptionsInitUpdatePaymentMethod)
	router.POST(baseURL+"/subscriptions/upgradeUserSubscription", wrapper.PostSubscriptionsUpgradeUserSubscription)
	router.POST(baseURL+"/support/messages", wrapper.PostSupportMessages)
	router.POST(baseURL+"/users/sendResetPasswordLink", wrapper.PostUsersSendResetPasswordLink)
	router.POST(baseURL+"/users/sendVerificationEmail", wrapper.PostUsersSendVerificationEmail)
	router.POST(baseURL+"/users/signUpUser", wrapper.PostUsersSignUpUser)
	router.POST(baseURL+"/users/updateUserPassword", wrapper.PostUsersUpdateUserPassword)
	router.POST(baseURL+"/users/verifyMagicLinkToken", wrapper.PostUsersVerifyMagicLinkToken)
	router.DELETE(baseURL+"/users/:userId", wrapper.DeleteUsersUserId)
	router.GET(baseURL+"/users/:userId/appsettings", wrapper.GetUsersUserIdAppsettings)
	router.POST(baseURL+"/users/:userId/appsettings", wrapper.PostUsersUserIdAppsettings)
	router.GET(baseURL+"/users/:userId/customPlayerColumns", wrapper.GetUsersUserIdCustomPlayerColumns)
	router.POST(baseURL+"/users/:userId/customPlayerColumns", wrapper.PostUsersUserIdCustomPlayerColumns)
	router.DELETE(baseURL+"/users/:userId/customPlayerColumns/:columnId", wrapper.DeleteUsersUserIdCustomPlayerColumnsColumnId)
	router.POST(baseURL+"/users/:userId/resetCurrentUserPassword", wrapper.PostUsersUserIdResetCurrentUserPassword)
	router.DELETE(baseURL+"/users/:userId/subscription", wrapper.DeleteUsersUserIdSubscription)
	router.GET(baseURL+"/users/:userId/subscription", wrapper.GetUsersUserIdSubscription)
	router.GET(baseURL+"/users/:userId/usersettings", wrapper.GetUsersUserIdUsersettings)
	router.POST(baseURL+"/users/:userId/usersettings", wrapper.PostUsersUserIdUsersettings)

}
